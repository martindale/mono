(() => { 'use strict'; class e {enabled; isEnabled; executing; constructor () { this.enabled = !1, this.isEnabled = !1, this.executing = !1 }enable () { return this.enabled ? Promise.resolve({ enabled: !0 }) : this.execute('enable').then(e => (typeof e.enabled === 'boolean' && (this.enabled = e.enabled, this.isEnabled = e.enabled), e)) }getInfo () { if (!this.enabled) throw new Error('Provider must be enabled before calling getInfo'); return this.execute('getInfo') }sendTransaction (e, t) { if (!this.enabled) throw new Error('Provider must be enabled before calling sendTransaction'); throw new Error('Alby does not support `sendTransaction`') }getAddress () { if (!this.enabled) throw new Error('Provider must be enabled before calling getAddress'); return this.execute('getAddressWithPrompt', {}) }request (e, t) { if (!this.enabled) throw new Error('Provider must be enabled before calling request'); throw new Error('Alby does not support `request`') }execute (e, t) { return (function (e, t, r) { return new Promise((n, a) => { const o = Math.random().toString().slice(4); window.postMessage({ id: o, application: 'LBE', prompt: !0, action: `${e}/${t}`, scope: e, args: r }, '*'), window.addEventListener('message', function t (r) { r.data && r.data.response && r.data.application === 'LBE' && r.data.scope === e && r.data.id === o && (r.data.data.error ? a(new Error(r.data.data.error)) : n(r.data.data.data), window.removeEventListener('message', t)) }) }) }('webbtc', e, t)) }}document && (window.webbtc = new e()) })()
