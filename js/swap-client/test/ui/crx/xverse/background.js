(() => { 'use strict'; const e = 'xverse-wallet'; let s, t, n, a; !(function (e) { e.transactionRequest = 'transactionRequest', e.transactionResponse = 'transactionResponse', e.authenticationRequest = 'authenticationRequest', e.authenticationResponse = 'authenticationResponse', e.signatureRequest = 'signatureRequest', e.signatureResponse = 'signatureResponse', e.structuredDataSignatureRequest = 'structuredDataSignatureRequest', e.structuredDataSignatureResponse = 'structuredDataSignatureResponse' }(s || (s = {}))), (function (e) { e.RequestDerivedStxAccounts = 'RequestDerivedStxAccounts', e.ShareInMemoryKeyToBackground = 'ShareInMemoryKeyToBackground', e.RequestInMemoryKeys = 'RequestInMemoryKeys', e.RemoveInMemoryKeys = 'RemoveInMemoryKeys', e.OriginatingTabClosed = 'OriginatingTabClosed' }(t || (t = {}))), (function (e) { e.getAddressRequest = 'getAddressRequest', e.getAddressResponse = 'getAddressResponse', e.signPsbtRequest = 'signPsbtRequest', e.signPsbtResponse = 'signPsbtResponse', e.signMessageRequest = 'signMessageRequest', e.signMessageResponse = 'signMessageResponse', e.sendBtcRequest = 'sendBtcRequest', e.sendBtcResponse = 'sendBtcResponse' }(n || (n = {}))), (function (e) { e.Home = '/', e.TransactionRequest = '/transaction-request', e.AuthenticationRequest = '/authentication-request', e.SignatureRequest = '/signature-request', e.AddressRequest = '/btc-select-address-request', e.SignBtcTx = '/psbt-signing-request', e.SendBtcTx = '/btc-send-request' }(a || (a = {}))); const r = a; function o (e, s = []) { const t = new URLSearchParams(); const n = (function (e) { return e.sender?.url ? new URL(e.sender.url).origin : e.sender?.origin }(e)); const a = (function (e) { return e.sender?.tab?.id }(e)); return t.set('origin', n ?? ''), t.set('tabId', a?.toString() ?? ''), s.forEach(([e, s]) => t.set(e, s)), { urlParams: t, origin: n, tabId: a } } function u ({ id: e, tabId: s, response: t }) { chrome.windows.onRemoved.addListener(n => { if (n !== e || !s) return; const a = t; chrome.tabs.sendMessage(s, a) }) } function i ({ request: t, response: n }) { return { source: e, method: s.signatureResponse, payload: { signatureRequest: t, signatureResponse: n } } } function d ({ tabId: e }) { chrome.tabs.onRemoved.addListener(s => { let n; e === s && (n = { method: t.OriginatingTabClosed, payload: { tabId: e } }, chrome.runtime.sendMessage(n)) }) } async function c (e, s) { return console.log(`/popup.html#${e}?${s.toString()}`), (function (e) { const { url: s, w: t = 360, h: n = 600 } = e; return new Promise(e => { chrome.windows.getCurrent(async a => { const r = a.left; const o = a.top; const { width: u, height: i } = a; const d = Math.floor(u / 2 - t / 2 + r); const c = Math.floor(i / 2 - n / 2 + o); const R = await chrome.windows.create({ url: s, width: t, height: n, top: c, left: d, focused: !0, type: 'popup' }); e(R) }) }) }({ url: `/popup.html#${e}?${s.toString()}` })) }chrome.runtime.onConnect.addListener(t => { t.name === 'xverse-content-script' && t.onMessage.addListener((t, a) => { (function (e) { return !('id' in e) })(t) && (async function (t, a) { const { payload: R } = t; switch (t.method) { case s.authenticationRequest:{ const { urlParams: t, tabId: n } = o(a, [['authRequest', R]]); const { id: i } = await c(r.AuthenticationRequest, t); u({ id: i, tabId: n, response: { source: e, payload: { authenticationRequest: R, authenticationResponse: 'cancel' }, method: s.authenticationResponse } }), d({ tabId: n }); break } case s.transactionRequest:{ const { urlParams: t, tabId: n } = o(a, [['request', R]]); const { id: i } = await c(r.TransactionRequest, t); u({ id: i, tabId: n, response: { source: e, method: s.transactionResponse, payload: { transactionRequest: R, transactionResponse: 'cancel' } } }), d({ tabId: n }); break } case s.signatureRequest:{ const { urlParams: e, tabId: s } = o(a, [['request', R], ['messageType', 'utf8']]); const { id: t } = await c(r.SignatureRequest, e); u({ id: t, tabId: s, response: i({ request: R, response: 'cancel' }) }), d({ tabId: s }); break } case s.structuredDataSignatureRequest:{ const { urlParams: e, tabId: s } = o(a, [['request', R], ['messageType', 'structured']]); const { id: t } = await c(r.SignatureRequest, e); u({ id: t, tabId: s, response: i({ request: R, response: 'cancel' }) }), d({ tabId: s }); break } case n.getAddressRequest:{ const { urlParams: s, tabId: t } = o(a, [['addressRequest', R]]); const { id: i } = await c(r.AddressRequest, s); u({ id: i, tabId: t, response: { source: e, payload: { addressRequest: R, addressResponse: 'cancel' }, method: n.getAddressResponse } }), d({ tabId: t }); break } case n.signPsbtRequest:{ const { urlParams: s, tabId: t } = o(a, [['signPsbtRequest', R]]); const { id: i } = await c(r.SignBtcTx, s); u({ id: i, tabId: t, response: { source: e, payload: { signPsbtRequest: R, signPsbtResponse: 'cancel' }, method: n.signPsbtResponse } }), d({ tabId: t }); break } case n.signMessageRequest:{ const { urlParams: s, tabId: t } = o(a, [['signMessageRequest', R]]); const { id: i } = await c(r.SignatureRequest, s); u({ id: i, tabId: t, response: { source: e, payload: { signMessageRequest: R, signMessageResponse: 'cancel' }, method: n.signMessageResponse } }), d({ tabId: t }); break } case n.sendBtcRequest:{ const { urlParams: s, tabId: t } = o(a, [['sendBtcRequest', R]]); const { id: i } = await c(r.SendBtcTx, s); u({ id: i, tabId: t, response: { source: e, payload: { sendBtcRequest: R, sendBtcResponse: 'cancel' }, method: n.sendBtcResponse } }), d({ tabId: t }); break } } }(t, a)) }) }) })()
