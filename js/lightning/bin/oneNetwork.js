#!/usr/bin/env node
const lnService = require('lightning');

const {createHash, randomBytes} = require('crypto');
const {createHodlInvoice, settleHodlInvoice, pay} = require('lightning');
const {subscribeToInvoice} = require('lightning');


// async function main () {
const main = async function () {


  const alice = lnService.authenticatedLndGrpc({
    cert: '2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434a544343416379674177494241674951436c714c506f7567644852456e31676e5a444b764c6a414b42676771686b6a4f50515144416a41784d5238770a485159445651514b45785a73626d5167595856306232646c626d56795958526c5a43426a5a584a304d51347744415944565151444577566862476c6a5a5441650a467730794d6a45774d4459774d544d324e445a61467730794d7a45794d4445774d544d324e445a614d444578487a416442674e5642416f54466d78755a4342680a645852765a3256755a584a686447566b49474e6c636e5178446a414d42674e5642414d544257467361574e6c4d466b77457759484b6f5a497a6a3043415159490a4b6f5a497a6a30444151634451674145787544306b3959344439445a512f51464a4c624b47784b68717678464f7a3272486f5064696a6933477470546e774a480a71664344646e705a6b547250366b6d304266705a643954727734375531494b762b6d61306c4b4f4278544342776a414f42674e56485138424166384542414d430a41715177457759445652306c42417777436759494b775942425155484177457744775944565230544151482f42415577417745422f7a416442674e56485134450a4667515534666e5a5768364e434f646f776b39756777797730354a377a574577617759445652305242475177596f4946595778705932574343577876593246730a6147397a644949465957787059325743446e4276624746794c5734334c57467361574e6c67675231626d6c3467677031626d6c346347466a61325630676764690a64575a6a623235756877522f4141414268784141414141414141414141414141414141414141414268775373474141454d416f4743437147534d343942414d430a413063414d45514349447650696d6b6873716876474e7a356c2f68524d6d334f4959747a5a704c7176366d4c715569346e6d525a4169426d56474679595252490a4e726343495973537377337342773267776e3863486d776d5a7079634633696539513d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a',
    // macaroon: '0201036c6e640267030a106a30b418a67e8aa0c4b894c8dc1861dd1201301a0c0a04696e666f1204726561641a170a08696e766f69636573120472656164120577726974651a160a076d657373616765120472656164120577726974651a100a086f6666636861696e120472656164000006209741f78a0402f02f361171d087829ceca443badca3c3b0a0a57b308c35a96b14+t6gDVlc=',
    macaroon: '0201036c6e6402f801030a10a02093af3b74a8ff9ed55268619aefaf1201301a160a0761646472657373120472656164120577726974651a130a04696e666f120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a210a086d616361726f6f6e120867656e6572617465120472656164120577726974651a160a076d657373616765120472656164120577726974651a170a086f6666636861696e120472656164120577726974651a160a076f6e636861696e120472656164120577726974651a140a057065657273120472656164120577726974651a180a067369676e6572120867656e657261746512047265616400000620d699b6df793dafe393475ac4e9e1cd7ef1eb0f799ccb5fba702d670583b49a55',
    socket: '127.0.0.1:10007',
  });

  const aliceInvoice = lnService.authenticatedLndGrpc( {
    cert: '2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434a544343416379674177494241674951436c714c506f7567644852456e31676e5a444b764c6a414b42676771686b6a4f50515144416a41784d5238770a485159445651514b45785a73626d5167595856306232646c626d56795958526c5a43426a5a584a304d51347744415944565151444577566862476c6a5a5441650a467730794d6a45774d4459774d544d324e445a61467730794d7a45794d4445774d544d324e445a614d444578487a416442674e5642416f54466d78755a4342680a645852765a3256755a584a686447566b49474e6c636e5178446a414d42674e5642414d544257467361574e6c4d466b77457759484b6f5a497a6a3043415159490a4b6f5a497a6a30444151634451674145787544306b3959344439445a512f51464a4c624b47784b68717678464f7a3272486f5064696a6933477470546e774a480a71664344646e705a6b547250366b6d304266705a643954727734375531494b762b6d61306c4b4f4278544342776a414f42674e56485138424166384542414d430a41715177457759445652306c42417777436759494b775942425155484177457744775944565230544151482f42415577417745422f7a416442674e56485134450a4667515534666e5a5768364e434f646f776b39756777797730354a377a574577617759445652305242475177596f4946595778705932574343577876593246730a6147397a644949465957787059325743446e4276624746794c5734334c57467361574e6c67675231626d6c3467677031626d6c346347466a61325630676764690a64575a6a623235756877522f4141414268784141414141414141414141414141414141414141414268775373474141454d416f4743437147534d343942414d430a413063414d45514349447650696d6b6873716876474e7a356c2f68524d6d334f4959747a5a704c7176366d4c715569346e6d525a4169426d56474679595252490a4e726343495973537377337342773267776e3863486d776d5a7079634633696539513d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a',
    macaroon: '0201036c6e640258030a109e2093af3b74a8ff9ed55268619aefaf1201301a160a0761646472657373120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a0f0a076f6e636861696e120472656164000006208d280f18bece6e098c1516593eb91858d2ade8b028a15ca969b0c3ba33ebbfa4',
    socket: 'localhost:10007',
  })

  const carol = lnService.authenticatedLndGrpc({
    cert: '2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434a6a4343416332674177494241674952414d522b49513741516d54655643337864482f5734465577436759494b6f5a497a6a3045417749774d5445660a4d4230474131554543684d576247356b494746316447396e5a57356c636d46305a575167593256796444454f4d4177474131554541784d4659324679623277770a4868634e4d6a49784d4441324d44457a4e6a51325768634e4d6a4d784d6a41784d44457a4e6a5132576a41784d523877485159445651514b45785a73626d51670a595856306232646c626d56795958526c5a43426a5a584a304d51347744415944565151444577566a59584a766244425a4d424d4742797147534d3439416745470a43437147534d34394177454841304941424b34716d61376b452b78334e7a6f6f646f622b79454e4a645450706e517630394a43306d74496951624836463134530a687251496343746571324d6a3876436e716b536b7a3753442f6553754576536f76684b39562b326a676355776763497744675944565230504151482f424151440a41674b6b4d424d47413155644a51514d4d416f47434373474151554642774d424d41384741315564457745422f7751464d414d4241663877485159445652304f0a42425945464c2b493073736e382f4866355572323966506672535350674a33614d477347413155644551526b4d474b4342574e68636d397367676c7362324e680a624768766333534342574e68636d39736767357762327868636931754e79316a59584a7662494945645735706549494b64573570654842685932746c644949480a596e566d59323975626f6345667741414159635141414141414141414141414141414141414141414159634572426741417a414b42676771686b6a4f505151440a41674e48414442454169424d7233637366694950655246766130766349794b4c6e59425258316364434e544a6549635755792b6662414967524b6430336665610a6f324a4a77354b4a4b32796e4c7a487245656b7932366257365676764a39565276676f3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a',
    // macaroon: '0201036c6e640267030a106a30b418a67e8aa0c4b894c8dc1861dd1201301a0c0a04696e666f1204726561641a170a08696e766f69636573120472656164120577726974651a160a076d657373616765120472656164120577726974651a100a086f6666636861696e120472656164000006209741f78a0402f02f361171d087829ceca443badca3c3b0a0a57b308c35a96b14+t6gDVlc=',
    macaroon: '0201036c6e6402f801030a10506eff17b3e7c76eae12a64d1ffbe4e61201301a160a0761646472657373120472656164120577726974651a130a04696e666f120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a210a086d616361726f6f6e120867656e6572617465120472656164120577726974651a160a076d657373616765120472656164120577726974651a170a086f6666636861696e120472656164120577726974651a160a076f6e636861696e120472656164120577726974651a140a057065657273120472656164120577726974651a180a067369676e6572120867656e657261746512047265616400000620d9ba78ca4b0c9fb6845d8aae791289bf80fac079bf6f97e1d5313b019d3aaa6a',
    socket: 'localhost:10009',
  });

  const carolInvoice = lnService.authenticatedLndGrpc({
    cert: '2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434a6a4343416332674177494241674952414d522b49513741516d54655643337864482f5734465577436759494b6f5a497a6a3045417749774d5445660a4d4230474131554543684d576247356b494746316447396e5a57356c636d46305a575167593256796444454f4d4177474131554541784d4659324679623277770a4868634e4d6a49784d4441324d44457a4e6a51325768634e4d6a4d784d6a41784d44457a4e6a5132576a41784d523877485159445651514b45785a73626d51670a595856306232646c626d56795958526c5a43426a5a584a304d51347744415944565151444577566a59584a766244425a4d424d4742797147534d3439416745470a43437147534d34394177454841304941424b34716d61376b452b78334e7a6f6f646f622b79454e4a645450706e517630394a43306d74496951624836463134530a687251496343746571324d6a3876436e716b536b7a3753442f6553754576536f76684b39562b326a676355776763497744675944565230504151482f424151440a41674b6b4d424d47413155644a51514d4d416f47434373474151554642774d424d41384741315564457745422f7751464d414d4241663877485159445652304f0a42425945464c2b493073736e382f4866355572323966506672535350674a33614d477347413155644551526b4d474b4342574e68636d397367676c7362324e680a624768766333534342574e68636d39736767357762327868636931754e79316a59584a7662494945645735706549494b64573570654842685932746c644949480a596e566d59323975626f6345667741414159635141414141414141414141414141414141414141414159634572426741417a414b42676771686b6a4f505151440a41674e48414442454169424d7233637366694950655246766130766349794b4c6e59425258316364434e544a6549635755792b6662414967524b6430336665610a6f324a4a77354b4a4b32796e4c7a487245656b7932366257365676764a39565276676f3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a',
    // macaroon: '0201036c6e640267030a106a30b418a67e8aa0c4b894c8dc1861dd1201301a0c0a04696e666f1204726561641a170a08696e766f69636573120472656164120577726974651a160a076d657373616765120472656164120577726974651a100a086f6666636861696e120472656164000006209741f78a0402f02f361171d087829ceca443badca3c3b0a0a57b308c35a96b14+t6gDVlc=',
    macaroon: '0201036c6e640258030a104e6eff17b3e7c76eae12a64d1ffbe4e61201301a160a0761646472657373120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a0f0a076f6e636861696e120472656164000006205a9397ed6d398f6a06462403a2b5a02918113f363a7f3757e59a2e7480dd47f6',
    socket: 'localhost:10009',
  });



// // Promise syntax
  const aliceWalletInfo = await lnService.getWalletInfo(alice);
  const aliceWalletPublicKey = aliceWalletInfo.public_key;
  console.log("Alice's wallet public key")
  console.log(aliceWalletPublicKey);
//
  const carolWalletInfo = await lnService.getWalletInfo(carol);
  const carolWalletPublicKey = carolWalletInfo.public_key;
  console.log("")
  console.log("Carol's wallet public key")
  console.log(carolWalletPublicKey);


//
  const randomSecret = () => randomBytes(32);
  const sha256 = buffer => createHash('sha256').update(buffer).digest('hex');

// Choose an r_hash for this invoice, a single sha256, on say randomBytes(32)
  const secret = randomSecret();

  const id = sha256(secret);

// Supply an authenticatedLndGrpc object for an lnd built with invoicesrpc tag
  aliceInvoice.id = id
  aliceInvoice.tokens = 10000
  console.log("")
  console.log("payment hash");
  console.log(aliceInvoice.id);
  const {request} = await createHodlInvoice(aliceInvoice);
  console.log("")
  console.log("Bolt 11 invoice");
  console.log(request);

// Share the request with the payer and wait for a payment
  const sub = subscribeToInvoice(aliceInvoice);

  sub.on('invoice_updated', async invoice => {
    // Only actively held invoices can be settled
    if (!invoice.is_held) {
      return;
    }
    console.log("")
    console.log("invoice updated");
    console.log(invoice.id);
    console.log("invoice amount");
    console.log(invoice.tokens);

    // Use the secret to claim the funds
    aliceInvoice.secret = secret.toString('hex');
    await settleHodlInvoice(aliceInvoice);
  });

  carol.request = request;
  const {payment} = pay(carol).catch(reason => console.log(reason));

}

main().catch(reason => console.log(reason));
